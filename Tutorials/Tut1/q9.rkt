#lang racket
(define infinity 10000000)

(define (fast-minchange sum)
  (define (minchange-helper sum currmin absmin currden)
    (displayln (list sum currmin absmin currden))
    (define (cond-descend nextden) (and (<= nextden currden)
                                        (>= sum nextden)))
    (cond [(= currmin absmin) absmin]
          [(and (= (remainder sum currden) 0)
                (< (+ (quotient sum currden) currmin) absmin))
           (+ (quotient sum currden) currmin)]
          [else (let*
                    ((m50 (if (cond-descend 50) (minchange-helper (- sum 50) (+ currmin 1)
                                                 absmin 50)
                              absmin))
                     (m25 (if (cond-descend 25) (minchange-helper (- sum 25) (+ currmin 1)
                                                 m50 25)
                              m50))
                     (m20 (if (cond-descend 20) (minchange-helper (- sum 20) (+ currmin 1)
                                                 m25 20)
                              m25))
                     (m10 (if (cond-descend 10) (minchange-helper (- sum 10) (+ currmin 1)
                                                 m20 10)
                              m20))
                     (m5 (if (cond-descend 5) (minchange-helper (- sum 5) (+ currmin 1)
                                                 m10 5)
                              m10))
                     (m3 (if (cond-descend 3) (minchange-helper (- sum 3) (+ currmin 1)
                                                 m5 3)
                              m5))
                     (m2 (if (cond-descend 2) (minchange-helper (- sum 2) (+ currmin 1)
                                                 m3 2)
                              m3))
                     (m1 (if (cond-descend 1) (minchange-helper (- sum 1) (+ currmin 1)
                                                 m2 1)
                              m2))) m1)]))
  (minchange-helper sum 0 infinity 50))
                                                                  